<!DOCTYPE html>
<html>
  <head>
    <title>My Chatbot</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <link rel="stylesheet" type="text/css" href="https://maxcdn.bootstrapcdn.com/bootswatch/3.3.7/cyborg/bootstrap.min.css">
    <link rel='stylesheet' href='/stylesheets/style.css' />
  </head>
  <body>

    <!-- Button trigger modal -->
    <button type="button" class="btn btn-primary btn-lg" data-toggle="modal" data-target="#myModal">
      Instructions for Demo Use
    </button>

    <!-- Modal -->
    <div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
            <h4 class="modal-title" id="myModalLabel">Current Chatbot Features & Usage</h4>
          </div>
          <div class="modal-body">
            <h5> Developer Notes: </h5>
            <ul>
              <li> I'm very interested in the way machine learning and general AI works, so this web application was built for personal use with the idea to continue to scale out over time and use as a virtual personal assistant. </li>
              <li> Voice Commands work on Chrome browsers only. </li>
            </ul>
            <h5> Technologies Used: </h5>
            <ul>
              <li> Server-side: Node.js, Express, MongoDB </li>
              <li> Client-side: Bootstrap, jQuery, AJAX </li>
              <li> AI: API.ai </li>
              <li> Speech: Chrome Web Speech API, HTML5 Webkit Speech Recognition API </li>
            </ul>
            <h5> Features </h5>
            <ul>
              <li> Small Talk: Chatbot currently has the capability to make general conversation courtesy of API.ai and general customizations I've made. </li>
              <li> Task Listing & Prioritization: Users are able to create tasks will will be saved in the database (view 'Show Task List') through a voice command or text input. The chatbot can recognize keywords such as 'urgent', 'important', during task creation to add priority to the task. Users are also able to announce when a task has been completed through voice or text command, which wil then prompt the bot to cross the item off on the list. A user must physically click the trash can icon for it to disappear from the list. </li>
            </ul>
            <h5> Directions for Use </h5>
            <ul>
              <li> Voice Command: Click the blue 'Speak' button, wait for button text to change to 'Recording...', then say anything you'd like. </li>
              <li> Text Inputs: Type anything into the input bar, press enter. </li>
              <li> Task Creation: Type/speak any from of 'create task', 'new task', 'remind me to', etc. followed by the actual task. Speak to it as you if you were to naturally ask for it to create a task. Even if it does not properly interpret what you've said, it gets smarter with the more speech it hears. You are able to view the JSON results to debug where it might have misinterpreted - I'd appreciate any feedback from developers! </li>
              <li> Task Creation by Urgency: This works generally the same way as above, but if you add a key word such as 'urgent {task}' or 'new important item {task}', it should be able to process the difference. </li>
              <li> Task Completion: Same concept again, just make a request how you might naturally say it, i.e., 'finish task {task}', 'complete task {task}', 'mark {task} as done', etc. </li>
            </ul>
          </div>
          <div class="modal-footer">
            <button type="button" id="modal-close" class="btn btn-default" data-dismiss="modal">Close</button>
          </div>
        </div>
      </div>
    </div>

    <div class="chat-container">
      <input id="speech" type="text">
      <button id="rec" class="btn btn-primary">Speak</button>
      <div id="spokenResponse" class="spoken-response">
        <div class="spoken-response-text"></div>
      </div>
    </div>
    <div class="debug">
      <div class="debug-btn btn">
        View AI JSON Results
      </div>
      <div class="debug-content">
        <textarea id="response" cols="40" rows="20"></textarea>
      </div>
    </div>
    <div class="task">
      <div class="task-btn btn">
        Show Task List
      </div>
      <div class="task-content">
        <div id="task-list">
          <% tasks.forEach(function(task) { %>
            <div id="task-item" <% if (task.completed)  { %> class="strike" <% } %> data-id="<%= task._id %>">
              <h6><%= task.name %><i class="fa fa-trash-o" aria-hidden="true"></i></h6> <p> Priority: <%= task.priority %> </p>
            </div>
          <% }) %>
        </div>
      </div>
    </div>

    <script src="https://use.fontawesome.com/2c06b0ed41.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>
    <script>
      var accessToken = "<%= process.env.ACCESS_TOKEN %>";
    </script>
    <script type="text/javascript" src='/javascripts/main.js'></script>
  </body>
</html>

